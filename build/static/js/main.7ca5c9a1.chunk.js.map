{"version":3,"sources":["components/Footer.js","Board/Board.jsx","lib/utils.js","components/Game.js","pages/Board.js","components/Button.js","components/Header.js","pages/Intro.js","App.js","index.js"],"names":["Footer","style","marginTop","className","fontWeight","LinkedListNode","value","this","next","LinkedList","node","head","tail","Direction","getStartingSnakeLLValue","board","rowSize","length","colSize","startingRow","Math","round","startingCol","row","col","cell","createBoard","BOARD_SIZE","counter","currentRow","push","getCoordsInDirection","coords","direction","isOutOfBounds","getDirectionFromKey","key","getNextNodeDirection","currentDirection","currentCol","nextRow","nextCol","getGrowthNodeCoords","snakeTail","tailNextNodeDirection","growthDirection","getOppositeDirection","currentTailCoords","getCellClassName","cellValue","foodCell","foodShouldReverseDirection","snakeCells","has","Board","useState","score","setScore","snake","setSnake","Set","setSnakeCells","setFoodCell","setDirection","setFoodShouldReverseDirection","useEffect","window","addEventListener","e","handleKeydown","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","newDirection","size","currentHeadCoords","nextHeadCoords","handleGameOver","nextHeadCell","newHead","currentHead","newSnakeCells","delete","add","growSnake","reverseSnake","handleFoodConsumption","growthNodeCoords","newTailCell","newTail","currentTail","previousNode","currentNode","nextNode","reverseLinkedList","snakeHead","nextFoodCell","min","max","floor","random","nextFoodShouldReverseDirection","snakeLLStartingValue","map","rowIdx","cellIdx","GameHeader","props","fontSize","color","title","href","hrefport","backgroundColor","borderColor","padding","textDecoration","icon","prebutton","name","BoardJS","Button","borderRadius","category","Header","pretag","break","posttag","Intro","App","path","component","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ca5c9a1.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Footer()\n{\n    return(\n        <footer style={{marginTop: '10px'}}>\n          <div className=\"container text-center\">\n            <p className=\"lead\" style={{fontWeight: 600}}>Â© 2021 Pratham Inamdar\n            </p>\n          </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import React, {useEffect, useState} from 'react';\nimport Footer from '../components/Footer'\nimport {\n  randomIntFromInterval,\n  reverseLinkedList,\n  useInterval,\n} from '../lib/utils.js';\n\nimport './Board.css';\n\n\nclass LinkedListNode {\n  constructor(value) {\n    this.value = value;\n    this.next = null;\n  }\n}\n\nclass LinkedList {\n  constructor(value) {\n    const node = new LinkedListNode(value);\n    this.head = node;\n    this.tail = node;\n  }\n}\n\nconst Direction = {\n  UP: 'UP',\n  RIGHT: 'RIGHT',\n  DOWN: 'DOWN',\n  LEFT: 'LEFT',\n};\n\nconst BOARD_SIZE = 15;\nconst PROBABILITY_OF_DIRECTION_REVERSAL_FOOD = 0.3;\n\nconst getStartingSnakeLLValue = board => {\n  const rowSize = board.length;\n  const colSize = board[0].length;\n  const startingRow = Math.round(rowSize / 3);\n  const startingCol = Math.round(colSize / 3);\n  const startingCell = board[startingRow][startingCol];\n  return {\n    row: startingRow,\n    col: startingCol,\n    cell: startingCell,\n  };\n};\n\nconst Board = () => {\n  const [score, setScore] = useState(0);\n  const [board, setBoard] = useState(createBoard(BOARD_SIZE));\n  const [snake, setSnake] = useState(\n    new LinkedList(getStartingSnakeLLValue(board)),\n  );\n  const [snakeCells, setSnakeCells] = useState(\n    new Set([snake.head.value.cell]),\n  );\n  const [foodCell, setFoodCell] = useState(snake.head.value.cell + 5);\n  const [direction, setDirection] = useState(Direction.RIGHT);\n  const [foodShouldReverseDirection, setFoodShouldReverseDirection] = useState(\n    false,\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', e => {\n      handleKeydown(e);\n    });\n  }, []);\n  useInterval(() => {\n    moveSnake();\n  }, 150);\n\n  const handleKeydown = e => {\n    const newDirection = getDirectionFromKey(e.key);\n    const isValidDirection = newDirection !== '';\n    if (!isValidDirection) return;\n    const snakeWillRunIntoItself =\n      getOppositeDirection(newDirection) === direction && snakeCells.size > 1;\n    if (snakeWillRunIntoItself) return;\n    setDirection(newDirection);\n  };\n\n  const moveSnake = () => {\n    const currentHeadCoords = {\n      row: snake.head.value.row,\n      col: snake.head.value.col,\n    };\n\n    const nextHeadCoords = getCoordsInDirection(currentHeadCoords, direction);\n    if (isOutOfBounds(nextHeadCoords, board)) {\n      handleGameOver();\n      return;\n    }\n    const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n    if (snakeCells.has(nextHeadCell)) {\n      handleGameOver();\n      return;\n    }\n\n    const newHead = new LinkedListNode({\n      row: nextHeadCoords.row,\n      col: nextHeadCoords.col,\n      cell: nextHeadCell,\n    });\n    const currentHead = snake.head;\n    snake.head = newHead;\n    currentHead.next = newHead;\n\n    const newSnakeCells = new Set(snakeCells);\n    newSnakeCells.delete(snake.tail.value.cell);\n    newSnakeCells.add(nextHeadCell);\n\n    snake.tail = snake.tail.next;\n    if (snake.tail === null) snake.tail = snake.head;\n\n    const foodConsumed = nextHeadCell === foodCell;\n    if (foodConsumed) {\n      growSnake(newSnakeCells);\n      if (foodShouldReverseDirection) reverseSnake();\n      handleFoodConsumption(newSnakeCells);\n    }\n\n    setSnakeCells(newSnakeCells);\n  };\n\n  const growSnake = newSnakeCells => {\n    const growthNodeCoords = getGrowthNodeCoords(snake.tail, direction);\n    if (isOutOfBounds(growthNodeCoords, board)) {\n      return;\n    }\n    const newTailCell = board[growthNodeCoords.row][growthNodeCoords.col];\n    const newTail = new LinkedListNode({\n      row: growthNodeCoords.row,\n      col: growthNodeCoords.col,\n      cell: newTailCell,\n    });\n    const currentTail = snake.tail;\n    snake.tail = newTail;\n    snake.tail.next = currentTail;\n\n    newSnakeCells.add(newTailCell);\n  };\n\n  const reverseSnake = () => {\n    const tailNextNodeDirection = getNextNodeDirection(snake.tail, direction);\n    const newDirection = getOppositeDirection(tailNextNodeDirection);\n    setDirection(newDirection);\n\n    reverseLinkedList(snake.tail);\n    const snakeHead = snake.head;\n    snake.head = snake.tail;\n    snake.tail = snakeHead;\n  };\n\n  const handleFoodConsumption = newSnakeCells => {\n    const maxPossibleCellValue = BOARD_SIZE * BOARD_SIZE;\n    let nextFoodCell;\n    while (true) {\n      nextFoodCell = randomIntFromInterval(1, maxPossibleCellValue);\n      if (newSnakeCells.has(nextFoodCell) || foodCell === nextFoodCell)\n        continue;\n      break;\n    }\n\n    const nextFoodShouldReverseDirection =\n      Math.random() < PROBABILITY_OF_DIRECTION_REVERSAL_FOOD;\n\n    setFoodCell(nextFoodCell);\n    setFoodShouldReverseDirection(nextFoodShouldReverseDirection);\n    setScore(score + 1);\n  };\n\n  const handleGameOver = () => {\n    setScore(0);\n    const snakeLLStartingValue = getStartingSnakeLLValue(board);\n    setSnake(new LinkedList(snakeLLStartingValue));\n    setFoodCell(snakeLLStartingValue.cell + 5);\n    setSnakeCells(new Set([snakeLLStartingValue.cell]));\n    setDirection(Direction.RIGHT);\n  };\n\n  return (\n    <>\n      <h1>Score: {score}</h1>\n      <div className=\"board\">\n        {board.map((row, rowIdx) => (\n          <div key={rowIdx} className=\"row\">\n            {row.map((cellValue, cellIdx) => {\n              const className = getCellClassName(\n                cellValue,\n                foodCell,\n                foodShouldReverseDirection,\n                snakeCells,\n              );\n              return <div key={cellIdx} className={className}></div>;\n            })}\n          </div>\n        ))}\n      </div>\n      <Footer />\n    </>\n  );\n};\n\nconst createBoard = BOARD_SIZE => {\n  let counter = 1;\n  const board = [];\n  for (let row = 0; row < BOARD_SIZE; row++) {\n    const currentRow = [];\n    for (let col = 0; col < BOARD_SIZE; col++) {\n      currentRow.push(counter++);\n    }\n    board.push(currentRow);\n  }\n  return board;\n};\n\nconst getCoordsInDirection = (coords, direction) => {\n  if (direction === Direction.UP) {\n    return {\n      row: coords.row - 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.RIGHT) {\n    return {\n      row: coords.row,\n      col: coords.col + 1,\n    };\n  }\n  if (direction === Direction.DOWN) {\n    return {\n      row: coords.row + 1,\n      col: coords.col,\n    };\n  }\n  if (direction === Direction.LEFT) {\n    return {\n      row: coords.row,\n      col: coords.col - 1,\n    };\n  }\n};\n\nconst isOutOfBounds = (coords, board) => {\n  const {row, col} = coords;\n  if (row < 0 || col < 0) return true;\n  if (row >= board.length || col >= board[0].length) return true;\n  return false;\n};\n\nconst getDirectionFromKey = key => {\n  if (key === 'ArrowUp') return Direction.UP;\n  if (key === 'ArrowRight') return Direction.RIGHT;\n  if (key === 'ArrowDown') return Direction.DOWN;\n  if (key === 'ArrowLeft') return Direction.LEFT;\n  return '';\n};\n\nconst getNextNodeDirection = (node, currentDirection) => {\n  if (node.next === null) return currentDirection;\n  const {row: currentRow, col: currentCol} = node.value;\n  const {row: nextRow, col: nextCol} = node.next.value;\n  if (nextRow === currentRow && nextCol === currentCol + 1) {\n    return Direction.RIGHT;\n  }\n  if (nextRow === currentRow && nextCol === currentCol - 1) {\n    return Direction.LEFT;\n  }\n  if (nextCol === currentCol && nextRow === currentRow + 1) {\n    return Direction.DOWN;\n  }\n  if (nextCol === currentCol && nextRow === currentRow - 1) {\n    return Direction.UP;\n  }\n  return '';\n};\n\nconst getGrowthNodeCoords = (snakeTail, currentDirection) => {\n  const tailNextNodeDirection = getNextNodeDirection(\n    snakeTail,\n    currentDirection,\n  );\n  const growthDirection = getOppositeDirection(tailNextNodeDirection);\n  const currentTailCoords = {\n    row: snakeTail.value.row,\n    col: snakeTail.value.col,\n  };\n  const growthNodeCoords = getCoordsInDirection(\n    currentTailCoords,\n    growthDirection,\n  );\n  return growthNodeCoords;\n};\n\nconst getOppositeDirection = direction => {\n  if (direction === Direction.UP) return Direction.DOWN;\n  if (direction === Direction.RIGHT) return Direction.LEFT;\n  if (direction === Direction.DOWN) return Direction.UP;\n  if (direction === Direction.LEFT) return Direction.RIGHT;\n};\n\nconst getCellClassName = (\n  cellValue,\n  foodCell,\n  foodShouldReverseDirection,\n  snakeCells,\n) => {\n  let className = 'cell';\n  if (cellValue === foodCell) {\n    if (foodShouldReverseDirection) {\n      className = 'cell cell-purple';\n    } else {\n      className = 'cell cell-red';\n    }\n  }\n  if (snakeCells.has(cellValue)) className = 'cell cell-green';\n\n  return className;\n};\n\nexport default Board;\n","import {useEffect, useRef} from 'react';\n\nexport function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport function reverseLinkedList(head) {\n  let previousNode = null;\n  let currentNode = head;\n  while (currentNode !== null) {\n    const nextNode = currentNode.next;\n    currentNode.next = previousNode;\n    previousNode = currentNode;\n    currentNode = nextNode;\n  }\n  return previousNode;\n}\n","import React from 'react';\n\nfunction GameHeader(props) {\n    return (\n        <div>\n            <h1 style={{ fontSize: '3.3rem', fontWeight: 700, color: 'rgb(255, 255, 255)' }}>{props.title}</h1>\n            <a className=\"border rounded border-dark\" href={props.hrefport} style={{ color: 'rgba(0, 0, 0, 1) !important', backgroundColor: 'rgb(0, 0, 0) !important', borderColor: 'rgb(0, 0, 0) !important', fontSize: '1.25rem', padding: '7.5px', textDecoration: 'none' }}>{props.icon}{props.prebutton}\n                &nbsp;<span style={{ fontWeight: 600 }}>{props.name}</span></a>\n        </div>\n    );\n}\n\nexport default GameHeader;","import Board from '../Board/Board';\nimport Header from '../components/Game'\n\nimport '../App.css';\n\nconst BoardJS = () => (\n  <div className=\"App\">\n    <Header \n        title = \"Snake\" hrefport = '/' icon = {<i className=\"fas fa-chevron-left\"></i>} prebutton = 'Back to' name = \"Instructions\"/>  \n    <Board></Board>\n  </div>\n);\n\nexport default BoardJS;\n","import React from 'react';\n\nfunction Button(props)\n{\n    return(\n        <a className=\"border rounded border-dark\" href={props.href} style={{color: '#fff !important', backgroundColor: '#000 !important', borderRadius: '10px !important', borderColor: '#fff !important', fontSize: '1.25rem', padding: '7px', textDecoration: 'none'}}>\n            <span style={{fontWeight: 600}}>{props.category}</span></a>\n    );\n}\n\nexport default Button;","import React from 'react';\n\nfunction Header(props) {\n    return (\n        <div>\n            <h1 style={{ fontSize: '3.3rem', fontWeight: 700, color: 'rgb(255, 255, 255)' }}>{props.title}</h1>\n            <p style={{ fontSize: '1.5rem', color: 'rgb(255, 255, 255)' }}>{props.pretag}&nbsp;{props.break}<a><span style={{color: 'rgb(255, 255, 255)'}}>{props.posttag}</span></a></p>\n            <a className=\"border rounded border-dark\" href={props.hrefport} style={{ color: 'rgba(0, 0, 0, 1) !important', backgroundColor: 'rgb(0, 0, 0) !important', borderColor: 'rgb(0, 0, 0) !important', fontSize: '1.25rem', padding: '7.5px', textDecoration: 'none' }}>{props.prebutton}\n                &nbsp;<span style={{ fontWeight: 600 }}>{props.name}</span></a>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport Footer from '../components/Footer'\nimport Button from '../components/Button'\nimport Header from '../components/Header'\n\nimport '../App.css';\n\nfunction Intro() {\n    return(\n        <div className=\"App container\">\n            <Header \n                title = \"Snake\"\n                pretag = \"A game built with javascript and presented via React.\"\n                break = {<br></br>}\n                posttag = \"Built in order to showcase the reversing of linked lists, an occurrance that is presented when a snake interacts with a purple apple.\"\n                hrefport = 'https://prathami1.github.io'\n                prebutton = 'Built By'\n                name = \"Pratham Inamdar\"\n            />\n            <h3>Rules:</h3>\n            <p>Here are the rules in order to play the game, in case you need a quick refresher:</p>\n            <p style={{fontSize: '25px'}}>You start as a snake with a length of 1 block.\n            <br></br> You can increase your length by eating apples, and your score will reset if you hit the borders of the game board.\n            <br></br> If you eat a red apple, your length will increase by 1 block. \n            <br></br> If you eat a purple apple, your length will increase by 1 block AND your snake will move in the opposite direction.\n            <br></br> If you run into your own body as a snake, your score will reset as well.\n            <br></br>\n            <br></br> Hope you enjoy playing!\n            </p>\n            <Button href=\"/play\" category=\"Start Playing\"/>\n            <Footer />\n        </div>\n    );\n}\nexport default Intro;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\n\nimport Board from './pages/Board'\nimport Intro from './pages/Intro'\n\nfunction App() {\n  return(\n    <main>\n      <Switch>\n        <Route \n          path='/'\n          component={Intro}\n          exact\n        />\n        <Route \n          path='/play'\n          component={Board}\n          exact\n        />\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}